package main;

public class OfflineExercises {

	// Given a string, return a string where
	// for every char in the original string,
	// there are three chars.

	// multChar("The") → "TTThhheee"
	// multChar("AAbb") → "AAAAAAbbbbbb"
	// multChar("Hi-There") → "HHHiii---TTThhheeerrreee"

	public String multChar(String input) {
		String str = "";
		if (input.equals("")) {
			return "";
		} else {
			for (int i = 1; i <= input.length(); i++) {
				str = str + input.substring(i - 1, i) + input.substring(i - 1, i) + input.substring(i - 1, i);
			}
			return str;
		}

	}

	// Return the string (backwards) that is between the first and last appearance
	// of "bert"
	// in the given string, or return the empty string "" if there is not 2
	// occurances of "bert" - Ignore Case

	// getBert("bertclivebert") → "evilc"
	// getBert("xxbertfridgebertyy") → "egdirf"
	// getBert("xxBertfridgebERtyy") → "egdirf"
	// getBert("xxbertyy") → ""
	// getBert("xxbeRTyy") → ""

	public String getBert(String input) {
		if (input.contains("bert")) {
			String output1 = input;
			String output2 = "";
			boolean start = input.substring(0, 4).equals("bert");
			boolean end = input.substring(input.length() - 4).equals("bert");

			while (end == false) {
				output1 = output1.substring(0, output1.length() - 2);
				end = output1.substring(output1.length() - 4).equalsIgnoreCase("bert");
			}
			while (start == false) {
				output1 = output1.substring(1);
				start = output1.substring(0, 4).equalsIgnoreCase("bert");
			}

			if (output1.equals("bert")) {
				return "";
			} else {
				output1 = output1.substring(4, output1.length() - 4);
				for (int i = 0; i < output1.length(); i++) {
					output2 = output2 + output1.substring(output1.length() - 1 - i, output1.length() - i);
				}
				/* System.out.println(output2 + "."); */

				return output2;
			}
		} else {
			return "";
		}
	}

	// Given three ints, a b c, one of them is small, one is medium and one is
	// large. Return true if the three values are evenly spaced, so the
	// difference between small and medium is the same as the difference between
	// medium and large. Do not assume the ints will come to you in a reasonable
	// order.

	// evenlySpaced(2, 4, 6) → true
	// evenlySpaced(4, 6, 2) → true
	// evenlySpaced(4, 6, 3) → false
	// evenlySpaced(4, 60, 9) → false

	public boolean evenlySpaced(int a, int b, int c) {
		int x = 0;
		int y = 0;
		int z = 0;

		if (a > b && a > c) {
			x = a;
			if (b > c) {
				y = b;
				z = c;
			} else {
				y = c;
				z = b;
			}
		} else if (b > a && b > c) {
			x = b;
			if (a > c) {
				y = a;
				z = c;
			} else {
				y = c;
				z = a;
			}
		} else {
			x = c;
			if (a > b) {
				y = a;
				z = b;
			} else {
				y = b;
				z = a;
			}
		}
		if (x - y == y - z) {
			return true;
		} else {
			return false;
		}

	}

	// Given a string and an int n, return a string that removes n letters from the
	// 'middle' of the string.
	// The string length will be at least n, and be odd when the length of the input
	// is odd.

	// nMid("Hello", 3) → "Ho"
	// nMid("Chocolate", 3) → "Choate"
	// nMid("Chocolate", 1) → "Choclate"

	public String nMid(String input, int a) {
		return input.substring(0, (input.length() - a) / 2)
				+ input.substring(input.length() - ((input.length() - a) / 2));
	}

	// Given a string, return true if it ends in "dev". Ignore Case

	// endsDev("ihatedev") → true
	// endsDev("wehateDev") → true
	// endsDev("everoyonehatesdevforreal") → false
	// endsDev("devisnotcool") → false

	public boolean endsDev(String input) {
		if (input.length() >= 3) {
			return input.substring(input.length() - 3).equalsIgnoreCase("dev");
		} else {
			return false;
		}
	}

	// Given a string, return the length of the largest "block" in the string.
	// A block is a run of adjacent chars that are the same.
	//
	// superBlock("hoopplla") → 2
	// superBlock("abbCCCddDDDeeEEE") → 3
	// superBlock("") → 0

	public int superBlock(String input) {

		int b = 0;
		for (int i = 1; i < input.length(); i++) {
			int a = 0;
			int j = i;
			while (input.substring(j - 1, j).equals(input.substring(i - 1, i)) && j < input.length()) {
				j++;
				a++;
			}
			if (a > b) {
				b = a;
			}
		}
		return b;

	}

	// given a string - return the number of times "am" appears in the String
	// ignoring case -
	// BUT ONLY WHEN the word "am" appears without being followed or proceeded by
	// other letters
	//
	// amISearch("Am I in Amsterdam") → 1
	// amISearch("I am in Amsterdam am I?") → 2
	// amISearch("I have been in Amsterdam") → 0

	public int amISearch(String arg1) {
		int a = 0;
		String editedInput = arg1;
		String editedInput2 = arg1;
		while (editedInput.startsWith("am ") || editedInput.startsWith("Am ") || editedInput.startsWith("aM ")
				|| editedInput.startsWith("AM ")) {
			a++;
			editedInput = editedInput.substring(2);
		}
		while (editedInput.endsWith(" am") || editedInput.endsWith(" Am") || editedInput.endsWith(" aM")
				|| editedInput.endsWith(" AM")) {
			a++;
			editedInput = editedInput.substring(0, editedInput.length() - 2);
		}

		editedInput2.replace(" am ", "  ");

		editedInput2.replace(" Am ", "  ");

		editedInput2.replace(" aM ", "");

		editedInput2.replace(" AM ", "");

		a = a + ((arg1.length() - editedInput2.length()) / 4);
		/*
		 * System.out.println(a); System.out.println(((arg1.length() -
		 * editedInput2.length())));
		 */
		return a;
	}

	// given a number
	// if this number is divisible by 3 return "fizz"
	// if this number is divisible by 5 return "buzz"
	// if this number is divisible by both 3 and 5return "fizzbuzz"
	//
	// fizzBuzz(3) → "fizz"
	// fizzBuzz(10) → "buzz"
	// fizzBuzz(15) → "fizzbuzz"

	public String fizzBuzz(int arg1) {
		String a = "fizz";
		String b = "buzz";
		if (arg1 % 3 == 0 && arg1 % 5 == 0) {
			return a + b;
		} else if (arg1 % 3 == 0) {
			return a;
		} else if (arg1 % 5 == 0) {
			return b;
		} else {
			return "";
		}
	}

	// Given a string split the string into the individual numbers present
	// then add each digit of each number to get a final value for each number
	// String example = "55 72 86"
	//
	// "55" will = the integer 10
	// "72" will = the integer 9
	// "86" will = the integer 14
	//
	// You then need to return the highest vale
	//
	// largest("55 72 86") → 14
	// largest("15 72 80 164") → 11
	// largest("555 72 86 45 10") → 15

	public int largest(String arg1) {

		String[] a = arg1.split(" ");
		int c = 0;

		for (int i = 0; i < a.length; i++) {
			if (Integer.parseInt(a[i]) >= 100) {
				int b = 0;
				b += Integer.parseInt(a[i]) % 10;
				b += (Integer.parseInt(a[i]) % 100 - Integer.parseInt(a[i]) % 10) / 10;
				b += (Integer.parseInt(a[i])-Integer.parseInt(a[i]) % 100)/100;
				if (b > c) {
					c = b;
				}
			} else if (Integer.parseInt(a[i]) > 10) {
				int b = 0;
				b += Integer.parseInt(a[i]) % 10;
				b += (Integer.parseInt(a[i]) - Integer.parseInt(a[i]) % 10) / 10;
				if (b > c) {
					c = b;
				} else {
					if (Integer.parseInt(a[i]) > c) {
						c = Integer.parseInt(a[i]);
					}
				}
			}
		}
		return c;
	}
}
